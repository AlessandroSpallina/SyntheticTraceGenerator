//
// Generated file, do not edit! Created by nedtool 6.0 from zapps/Publisher/packets/PublisherPacket.msg.
//

#ifndef __PUBLISHERPACKET_M_H
#define __PUBLISHERPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class PublisherPacket;
#include "nodes/mec/MECPlatform/MECPackets_m.h" // import nodes.mec.MECPlatform.MECPackets

/**
 * Class generated from <tt>zapps/Publisher/packets/PublisherPacket.msg:19</tt> by nedtool.
 * <pre>
 * class PublisherPacket extends MECPacket
 * {
 *     int ueOmnetID;
 * 
 *     string sensorName;
 *     string unit;
 *     double value;
 * 
 * }
 * </pre>
 */
class PublisherPacket : public ::MECPacket
{
  protected:
    int ueOmnetID = 0;
    omnetpp::opp_string sensorName;
    omnetpp::opp_string unit;
    double value = 0;

  private:
    void copy(const PublisherPacket& other);

  protected:
    bool operator==(const PublisherPacket&) = delete;

  public:
    PublisherPacket();
    PublisherPacket(const PublisherPacket& other);
    virtual ~PublisherPacket();
    PublisherPacket& operator=(const PublisherPacket& other);
    virtual PublisherPacket *dup() const override {return new PublisherPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getUeOmnetID() const;
    virtual void setUeOmnetID(int ueOmnetID);
    virtual const char * getSensorName() const;
    virtual void setSensorName(const char * sensorName);
    virtual const char * getUnit() const;
    virtual void setUnit(const char * unit);
    virtual double getValue() const;
    virtual void setValue(double value);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PublisherPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PublisherPacket& obj) {obj.parsimUnpack(b);}

#endif // ifndef __PUBLISHERPACKET_M_H

